setwd("/Users/zopper/projects/datasci_course_materials/assignment5")
myData <- read.csv("seaflow_21min.csv")
summary(myData)
summary(myData)
library(caret)
library(package = "lattice")
library(package = "ggplot2")
install.packages("ggplot2")
set.seed(3456)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
training <- myData[inTrainingSet,]
testing <- myData[-inTrainingSet,]
summary(seaflowTrain)
set.seed(3456)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
library(caret)
install.packages("caret", dependencies = c("Depends", "Suggests"))
View(myData)
View(myData)
View(myData)
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model_1 <- rpart(fol, method="class", data=training)
library(caret)
library(caret)
set.seed(3456)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
library(caret)
library(caret)
install.packages("car",dependencies=TRUE)
library(caret)
install.packages("pbkrtest")
install.packages("ModelMetrics")
library(caret)
set.seed(3456)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
training <- myData[inTrainingSet,]
testing <- myData[-inTrainingSet,]
summary(seaflowTrain)
testing
set.seed(3456)
inTrainingSet <- createDataPartition(myData$pop,p = 0.5,list=FALSE)
training <- myData[inTrainingSet,]
testing <- myData[-inTrainingSet,]
summary(seaflowTrain)
summary(seaflowTrain)
library(ggplot2)
p <- ggplot(myData, aes(x = chl_small, y = pe ) )
p + geom_line(aes(colour = pop))
ggplot(aes(x=chl_small,y=pe,color=pop),data=myData)+geom_jitter()
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model_1 <- rpart(fol, method="class", data=training)
print(model)
library(partykit)
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("partykit")
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model_1 <- rpart(fol, method="class", data=training)
print(model)
library(rpart)
fol <- formula(pop ~ fsc_small + fsc_perp + fsc_big + pe + chl_big + chl_small)
model_1 <- rpart(fol, method="class", data=training)
print(model_1)
library(partykit)
rpart1a <- as.party(model_1)
plot(rpart1a)
predict_1=predict(model_1,newdata=testing)
str(predict_1)
pop_test_1=c()
pop_names=c("crypto","nano","pico","synecho","ultra")
for (i in 1:nrow(predict_1)){
pop_test_1=c(pop_test_1,pop_names[which.max(predict_1[i,])])
}
result_1=as.vector(testing$pop)==pop_test_1
table(result_1)
accuracy_1=sum(result_1)/length(pop_test_1)
predict_1c=predict(model_1,newdata=testing,type= "class")
table(predict_1c, testing$pop)
confusionMatrix(predict_1c, testing$pop)
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
rfNews()
install.packages("randomForest")
install.packages("randomForest")
defaults write org.R-project.R force.LANG en_US.UTF-8
locale -a | grep en_US
defaults write org.R-project.R force.LANG en_US.UTF-8
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
install.packages("randomForest")
install.packages("randomForest")
install.packages("randomForest")
tain <- read.csv("train.csv")
train <- read.csv("train.csv")
train
library(readr)
train <- read_csv("~/projects/datasci_course_materials/assignment5/train.csv")
View(train)
library(readr)
test <- read_csv("~/projects/datasci_course_materials/assignment5/test.csv")
View(test)
str(train)
train <- read.csv("train.csv", stringsAsFactors=FALSE)
table(train$Survived)
prop.table(table)
prop.table(table(train$Survived))
test$Survived <- rep(0, 418)
submit <- data.frame(PassengerId=test$PassengerId, Survived=test$Survived)
summary(train$Sex)
